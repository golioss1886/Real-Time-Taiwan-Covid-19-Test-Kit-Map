install.packages('installr')
library(installr)
updateR()
updateR()
library(devtools)
library(githubinstall)
install.packages("githubinstall")
library(githubinstall)
install_github("rstudio/leaflet")
library(devtools)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("devtools")
library(devtools)
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.1.tar.gz", repos = NULL, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/rlang/rlang_1.0.1.tar.gz", repos = NULL, type="source")
.libPaths()
shiny::runApp('R/Cloud_Final')
runApp('R/Final')
runApp('R/Final')
setwd("~/R/Final")
runApp()
setwd("~/R/Final")
runApp()
runApp()
library(shiny)
library(leaflet)
library(RColorBrewer)
library(varhandle)
# shinyUI(fluidPage(
#       textInput("Longitude","Longitude",121.2652727),
#       textInput("Latitude","Latitude",24.9701632)
# )
# )
ui <- fluidPage(
textInput("Longitude","Longitude",121.2652727),
textInput("Latitude","Latitude",24.9701632),
#submitButton("Submit"),
actionButton("Submit"),
htmlOutput("result_text"),
htmlOutput("out")
)
server <- function(input, output, session) {
output$out <- renderUI ({
vec <- getLocCheck()
if( (vec[1] == FALSE) | (vec[2] == FALSE)) {
p("Please input longitude & latitude", style = "color:red;font-size:25px")
}
})
getLocCheck <- reactive({
check.numeric(c(input$Longitude,input$Latitude))
})
getLoc <- reactive({
vec <- getLocCheck()
if(vec[1] == TRUE & vec[2] == TRUE) {
list(as.numeric(input$Longitude), as.numeric(input$Latitude))
}
})
# getLoc <- reactive({
#     list(as.numeric(input$Longitude), as.numeric(input$Latitude))
# })
output$result_text <- renderUI({
vec_loc <- getLoc()
print(vec_loc)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(RColorBrewer)
library(varhandle)
# shinyUI(fluidPage(
#       textInput("Longitude","Longitude",121.2652727),
#       textInput("Latitude","Latitude",24.9701632)
# )
# )
ui <- fluidPage(
textInput("Longitude","Longitude",121.2652727),
textInput("Latitude","Latitude",24.9701632),
#submitButton("Submit"),
actionButton("Submit"),
htmlOutput("result_text"),
htmlOutput("out")
)
server <- function(input, output, session) {
output$out <- renderUI ({
vec <- getLocCheck()
if( (vec[1] == FALSE) | (vec[2] == FALSE)) {
p("Please input longitude & latitude", style = "color:red;font-size:25px")
}
})
getLocCheck <- reactive({
check.numeric(c(input$Longitude,input$Latitude))
})
getLoc <- reactive({
vec <- getLocCheck()
if(vec[1] == TRUE & vec[2] == TRUE) {
list(as.numeric(input$Longitude), as.numeric(input$Latitude))
}
})
# getLoc <- reactive({
#     list(as.numeric(input$Longitude), as.numeric(input$Latitude))
# })
output$result_text <- renderUI({
vec_loc <- getLoc()
print(vec_loc)
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(RColorBrewer)
library(varhandle)
# shinyUI(fluidPage(
#       textInput("Longitude","Longitude",121.2652727),
#       textInput("Latitude","Latitude",24.9701632)
# )
# )
ui <- fluidPage(
textInput("Longitude","Longitude",121.2652727),
textInput("Latitude","Latitude",24.9701632),
submitButton("Submit"),
#actionButton("Submit"),
htmlOutput("result_text"),
htmlOutput("out")
)
server <- function(input, output, session) {
output$out <- renderUI ({
vec <- getLocCheck()
if( (vec[1] == FALSE) | (vec[2] == FALSE)) {
p("Please input longitude & latitude", style = "color:red;font-size:25px")
}
})
getLocCheck <- reactive({
check.numeric(c(input$Longitude,input$Latitude))
})
getLoc <- reactive({
vec <- getLocCheck()
if(vec[1] == TRUE & vec[2] == TRUE) {
list(as.numeric(input$Longitude), as.numeric(input$Latitude))
}
})
# getLoc <- reactive({
#     list(as.numeric(input$Longitude), as.numeric(input$Latitude))
# })
output$result_text <- renderUI({
vec_loc <- getLoc()
print(vec_loc)
})
}
shinyApp(ui = ui, server = server)
runApp('~/R/Cloud_Final')
setwd("~/R/Cloud_Final")
runApp()
